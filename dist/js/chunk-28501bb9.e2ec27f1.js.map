{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.regexp.to-string.js","webpack:///./node_modules/core-js/internals/string-multibyte.js","webpack:///./node_modules/numeral/numeral.js","webpack:///./node_modules/core-js/internals/regexp-flags.js","webpack:///./src/assets/close.svg","webpack:///./node_modules/core-js/modules/es.array.slice.js"],"names":["redefine","anObject","fails","flags","TO_STRING","RegExpPrototype","RegExp","prototype","nativeToString","NOT_GENERIC","call","source","INCORRECT_NAME","name","R","this","p","String","rf","f","undefined","unsafe","toInteger","requireObjectCoercible","createMethod","CONVERT_TO_STRING","$this","pos","first","second","S","position","size","length","charCodeAt","charAt","slice","module","exports","codeAt","global","factory","numeral","_","VERSION","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","_input","_value","value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","regexps","unformat","match","stringToNumber","Number","version","obj","numberToFormat","format","roundingFunction","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","leadingCount","abbr","trillion","billion","million","thousand","decimal","neg","Math","includes","indexOf","abbreviations","toString","split","toFixed","delimiters","i","string","abbreviation","stringOriginal","currency","symbol","pow","min","search","insert","subString","start","reduce","array","callback","TypeError","t","Object","len","k","arguments","multiplier","x","parts","correctionFactor","args","Array","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","key","toLowerCase","localeData","Error","reset","property","register","type","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","e","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","cback","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","space","splice","join","base","suffixes","binary","allSuffixes","concat","filter","item","unformatRegex","bytes","suffix","bytesMultiplier","symbols","before","after","exponential","toExponential","num","hours","floor","minutes","seconds","timeArray","that","result","ignoreCase","multiline","dotAll","unicode","sticky","$","isObject","isArray","toAbsoluteIndex","toLength","toIndexedObject","createProperty","wellKnownSymbol","arrayMethodHasSpeciesSupport","arrayMethodUsesToLength","HAS_SPECIES_SUPPORT","USES_TO_LENGTH","ACCESSORS","0","1","SPECIES","nativeSlice","target","proto","forced","end","Constructor","n","fin","constructor"],"mappings":"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","file":"js/chunk-28501bb9.e2ec27f1.js","sourcesContent":["'use strict';\nvar redefine = require('../internals/redefine');\nvar anObject = require('../internals/an-object');\nvar fails = require('../internals/fails');\nvar flags = require('../internals/regexp-flags');\n\nvar TO_STRING = 'toString';\nvar RegExpPrototype = RegExp.prototype;\nvar nativeToString = RegExpPrototype[TO_STRING];\n\nvar NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });\n// FF44- RegExp#toString has a wrong name\nvar INCORRECT_NAME = nativeToString.name != TO_STRING;\n\n// `RegExp.prototype.toString` method\n// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring\nif (NOT_GENERIC || INCORRECT_NAME) {\n  redefine(RegExp.prototype, TO_STRING, function toString() {\n    var R = anObject(this);\n    var p = String(R.source);\n    var rf = R.flags;\n    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);\n    return '/' + p + '/' + f;\n  }, { unsafe: true });\n}\n","var toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `String.prototype.{ codePointAt, at }` methods implementation\nvar createMethod = function (CONVERT_TO_STRING) {\n  return function ($this, pos) {\n    var S = String(requireObjectCoercible($this));\n    var position = toInteger(pos);\n    var size = S.length;\n    var first, second;\n    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\n    first = S.charCodeAt(position);\n    return first < 0xD800 || first > 0xDBFF || position + 1 === size\n      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF\n        ? CONVERT_TO_STRING ? S.charAt(position) : first\n        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.codePointAt` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat\n  codeAt: createMethod(false),\n  // `String.prototype.at` method\n  // https://github.com/mathiasbynens/String.prototype.at\n  charAt: createMethod(true)\n};\n","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n","'use strict';\nvar anObject = require('../internals/an-object');\n\n// `RegExp.prototype.flags` getter implementation\n// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.dotAll) result += 's';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","module.exports = __webpack_public_path__ + \"img/close.241151a0.svg\";","'use strict';\nvar $ = require('../internals/export');\nvar isObject = require('../internals/is-object');\nvar isArray = require('../internals/is-array');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toLength = require('../internals/to-length');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar createProperty = require('../internals/create-property');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('slice', { ACCESSORS: true, 0: 0, 1: 2 });\n\nvar SPECIES = wellKnownSymbol('species');\nvar nativeSlice = [].slice;\nvar max = Math.max;\n\n// `Array.prototype.slice` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.slice\n// fallback for not array-like ES3 strings and DOM objects\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  slice: function slice(start, end) {\n    var O = toIndexedObject(this);\n    var length = toLength(O.length);\n    var k = toAbsoluteIndex(start, length);\n    var fin = toAbsoluteIndex(end === undefined ? length : end, length);\n    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible\n    var Constructor, result, n;\n    if (isArray(O)) {\n      Constructor = O.constructor;\n      // cross-realm fallback\n      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {\n        Constructor = undefined;\n      } else if (isObject(Constructor)) {\n        Constructor = Constructor[SPECIES];\n        if (Constructor === null) Constructor = undefined;\n      }\n      if (Constructor === Array || Constructor === undefined) {\n        return nativeSlice.call(O, k, fin);\n      }\n    }\n    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));\n    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);\n    result.length = n;\n    return result;\n  }\n});\n"],"sourceRoot":""}